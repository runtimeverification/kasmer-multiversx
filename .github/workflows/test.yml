name: 'Test'
on:
  pull_request:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  version-bump:
    name: 'Version Bump'
    runs-on: [self-hosted, linux, flyweight-ephemeral]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          # fetch-depth 0 means deep clone the repo
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: 'Configure GitHub user'
        run: |
          git config user.name devops
          git config user.email devops@runtimeverification.com
      - name: 'Update version'
        run: |
          og_version=$(git show origin/${GITHUB_BASE_REF}:package/version)
          ./package/version.sh bump ${og_version}
          ./package/version.sh sub
          new_version=$(cat package/version)
          git add --update && git commit --message "Set Version: ${new_version}" || true
      - name: 'Push updates'
        run: git push origin HEAD:${GITHUB_HEAD_REF}

  python-code-quality-checks:
    name: 'Code Quality Checks'
    runs-on: [self-hosted, linux, flyweight]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          submodules: recursive
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: 'Install Poetry'
        uses: Gr1N/setup-poetry@v8
      - name: 'Build and run code quality checks'
        run: make -C kmxwasm check
  unit-tests:
    name: 'Kmxwasm unittests'
    runs-on: [self-hosted, linux, normal]
    needs: [python-code-quality-checks]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          submodules: recursive
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          container-name: mx-wasm-ci-${{ github.sha }}
      - name: 'Install dependencies'
        run: docker exec --user user mx-wasm-ci-${GITHUB_SHA} poetry -C kmxwasm install
      - name: 'Run unit tests'
        run: docker exec --user user mx-wasm-ci-${GITHUB_SHA} make -C kmxwasm test-unit
      - name: 'Tear down Docker'
        if: always()
        run: docker stop --time 0 mx-wasm-ci-${GITHUB_SHA}
  integration-tests:
    name: 'Kmxwasm integration tests'
    runs-on: [self-hosted, linux, normal]
    needs: [python-code-quality-checks,unit-tests]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          submodules: recursive
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          container-name: mx-wasm-ci-${{ github.sha }}
      - name: 'Install dependencies'
        run: docker exec --user user mx-wasm-ci-${GITHUB_SHA} poetry -C kmxwasm install
      - name: 'Build Haskell semantics'
        run: docker exec --user user mx-wasm-ci-${GITHUB_SHA} make -C kmxwasm kbuild-haskell
      - name: 'Run integration tests'
        run: docker exec --user user mx-wasm-ci-${GITHUB_SHA} make -C kmxwasm test-integration
      - name: 'Tear down Docker'
        if: always()
        run: docker stop --time 0 mx-wasm-ci-${GITHUB_SHA}
  lemma-tests:
    name: 'Build and Test lemmas'
    runs-on: [self-hosted, linux, normal]
    needs: [python-code-quality-checks,unit-tests]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          submodules: recursive
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          container-name: mx-wasm-ci-${{ github.sha }}
      - name: 'Install dependencies'
        run: docker exec --user user mx-wasm-ci-${GITHUB_SHA} poetry -C kmxwasm install
      - name: 'Check lemmas are up to date'
        run: docker exec --user user mx-wasm-ci-${GITHUB_SHA} make -C kmxwasm test-lemmas-not-changed
      - name: 'Test lemmas'
        run: docker exec --user user mx-wasm-ci-${GITHUB_SHA} make -C kmxwasm test-lemmas-unit
      - name: 'Prove lemmas'
        run: docker exec --user user mx-wasm-ci-${GITHUB_SHA} make -C kmxwasm test-proofs
      - name: 'Tear down Docker'
        if: always()
        run: docker stop --time 0 mx-wasm-ci-${GITHUB_SHA}
